{"version":3,"sources":["webpack://Store/webpack/universalModuleDefinition","webpack://Store/webpack/bootstrap","webpack://Store/./src/index.ts","webpack://Store/./src/event.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Store","storage","namespace","Math","random","toString","slice","events","this","localStorage","sessionStorage","synchrodata","storagefn","e","storagechangefn","detail","uuid","emeit","addEventListener","once","removeEventListener","keys","length","has","temp","forEach","dispatch","data","entries","filter","removeItem","clear","event","CustomEvent","bubbles","cancelable","dispatchEvent","isSave","setItem","JSON","stringify","getItem","test","parse","EventStatus","Map","type","set","push","callfn","status","END","DELETE","splice","DELETE_AND_END","fn","add","args","offFn","delete"],"mappings":"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","file":"index.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Store\"] = factory();\n\telse\n\t\troot[\"Store\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * @author 翠林\n * @deprecated 对 Storage 的封装\n */\n\nimport Events from './event'\n\n/**\n * Store 实例的内部缓存\n */\ntype Data = {\n    [propName: string]: any\n}\n\n/**\n * Storage 管理器\n */\nexport default class Store {\n    /** 当前实例的标识 */\n    #uuid: string = Math.random().toString(16).slice(2, 12)\n\n    /** Storage */\n    #storage: Storage\n\n    /**\n     * 当前实例对数据的缓存\n     */\n    #data: Data = {}\n\n    /** 事件管理器 */\n    public events: Events = new Events()\n\n    /**\n     * 获取当前空间下的所有数据\n     */\n    public get data() {\n        return this.#data\n    }\n\n    /**\n     * 获取当前空间下键值对的个数\n     */\n    public get size() {\n        return this.keys().length\n    }\n\n    /**\n     * 创建数据库管理器实例\n     * @param storage Storage 类型\n     * @param namespace Storage 的键名\n     */\n    public constructor(protected storage: 'local' | 'session', protected namespace: string = 'clinfc-store') {\n        this.#storage = storage === 'local' ? window.localStorage : window.sessionStorage\n\n        this.synchrodata(false)\n\n        // storage 事件的回调函数\n        const storagefn = (e: StorageEvent) => {\n            if (e.key === this.namespace) {\n                this.synchrodata(false)\n            }\n        }\n\n        // 自定义 storage change 事件的回调函数\n        const storagechangefn = (e: CustomEventInit) => {\n            if (e.detail && e.detail.namespace === this.namespace) {\n                if (e.detail.uuid !== this.#uuid) {\n                    this.synchrodata(false)\n                }\n                this.events.emeit('change')\n            }\n        }\n\n        // 绑定监听\n        window.addEventListener('storage', storagefn)\n        window.addEventListener(`${this.storage}storagechange`, storagechangefn)\n\n        // 销毁时取消监听事件\n        this.events.once('destory', () => {\n            window.removeEventListener('storage', storagefn)\n            window.removeEventListener(`${this.storage}storagechange`, storagechangefn)\n        })\n    }\n\n    /**\n     * 获取当前命名空间下所有的键的集合。返回一个数组。\n     */\n    public keys() {\n        return Object.keys(this.#data)\n    }\n\n    /**\n     * 判断缓存中是否包含该键名\n     * @param key 键名\n     */\n    public has(key: string) {\n        return key in this.#data\n    }\n\n    /**\n     * 获取指定键名的数据\n     * @param key 键名\n     */\n    public get(key: string) {\n        if (this.has(key)) {\n            return this.#data[key]\n        }\n        return null\n    }\n\n    /**\n     * 批量获取数据。不存在的键名其值将为 null\n     * @param keys 需要获取的键名集合\n     */\n    public gets(...keys: string[]) {\n        const temp: Data = {}\n        keys.forEach(key => {\n            temp[key] = this.get(key)\n        })\n        return temp\n    }\n\n    /**\n     * 批量获取数据。只返回存在的键及其值\n     * @param keys 需要获取的键名集合\n     */\n    public only(...keys: string[]) {\n        const temp: Data = {}\n        keys.forEach(key => {\n            if (this.has(key)) {\n                temp[key] = this.get(key)\n            }\n        })\n        return temp\n    }\n\n    /**\n     * 添加/设置值\n     * @param key 键名\n     * @param value 值\n     */\n    public set(key: string, value: any) {\n        this.#data[key] = value\n        this.synchrodata(true)\n        this.dispatch()\n        return this\n    }\n\n    /**\n     * 批量设置数据\n     * @param data Object 对象\n     */\n    public sets(data: Data) {\n        const entries = Object.entries(data)\n        if (entries.length) {\n            entries.forEach(([key, value]) => {\n                this.#data[key] = value\n            })\n            this.synchrodata(true)\n            this.dispatch()\n        }\n        return this\n    }\n\n    /**\n     * 删除指定键名数据\n     * @param key 需要被删除的键\n     */\n    public remove(...keys: string[]) {\n        keys = keys.filter(key => this.has(key))\n        if (keys.length) {\n            keys.forEach(key => {\n                delete this.#data[key]\n            })\n            this.synchrodata(true)\n            this.dispatch()\n        }\n        return this\n    }\n\n    /**\n     * 清除数据\n     */\n    public clear() {\n        this.#data = {}\n        this.#storage.removeItem(this.namespace)\n        this.dispatch()\n        return this\n    }\n\n    /**\n     * 销毁实例\n     */\n    public destroy() {\n        this.events.emeit('destory')\n        this.events.clear()\n        this.#data = {}\n    }\n\n    /**\n     * 发布 sessionstoragechange/localstoragechange 事件\n     */\n    public dispatch() {\n        const event = new CustomEvent(`${this.storage}storagechange`, {\n            bubbles: true,\n            cancelable: true,\n            detail: {\n                uuid: this.#uuid,\n                namespace: this.namespace,\n            },\n        })\n        window.dispatchEvent(event)\n    }\n\n    /**\n     * 同步当前实例与 Storage 中的数据\n     * @param isSave true: 将实例中的缓存数据保存到 Storage 中；false: 将 Storage 中数据同步到当前实例的缓存中\n     */\n    public synchrodata(isSave: boolean = true) {\n        if (isSave) {\n            // 将当前实例中的数据保存到缓存中\n            this.#storage.setItem(this.namespace, JSON.stringify(this.#data))\n        } else {\n            // 将缓存中的数据同步到当前实例中\n            const data = this.#storage.getItem(this.namespace)\n            if (data && /^\\{.*\\}$/.test(data)) {\n                this.#data = JSON.parse(data)\n            } else {\n                this.#data = {}\n            }\n        }\n    }\n\n    /**\n     * 快捷创建 sessionStorage 类型数据库管理器实例\n     * @param namespace 数据库名称\n     */\n    public static session(namespace?: string) {\n        return new Store('session', namespace)\n    }\n\n    /**\n     * 快捷创建 localStorage 类型数据库管理器实例\n     * @param namespace 数据库名称\n     */\n    public static local(namespace?: string) {\n        return new Store('local', namespace)\n    }\n}\n","/**\n * @deprecated 事件管理器\n */\n\n/**\n * 事件项数据\n */\nexport interface EventItem {\n    fn: Function\n    once: boolean\n}\n\nexport enum EventStatus {\n    /** 继续循环 */\n    NEXT,\n    /** 终止循环 */\n    END,\n    /** 删除当前元素 */\n    DELETE,\n    /** 删除当前元素并终止循环 */\n    DELETE_AND_END,\n}\n\n/**\n * 遍历事件池时的自定义回调函数\n */\nexport type eachcall = (value: EventItem, index: number) => EventStatus | void\n\nexport default class Events {\n    /**\n     * 事件池\n     */\n    protected data: Map<string, EventItem[]> = new Map()\n\n    /**\n     * 将事件函数相关数据保存到事件池中\n     * @param type 事件类型\n     * @param data 事件数据\n     */\n    protected add(type: string, data: EventItem) {\n        if (!this.data.has(type)) {\n            this.data.set(type, [])\n        }\n        ;(this.data.get(type) as EventItem[]).push(data)\n    }\n\n    /**\n     * 遍历事件池\n     * @param type 事件类型\n     * @param callfn 自定义回调函数\n     */\n    protected forEach(type: string, callfn: eachcall) {\n        if (this.data.has(type)) {\n            const events = this.data.get(type) as EventItem[]\n            for (let i = 0; i < events.length; i++) {\n                const status = callfn(events[i], i)\n                // 终止循环\n                if (EventStatus.END == status) {\n                    break\n                }\n                // 删除当前元素\n                else if (EventStatus.DELETE == status) {\n                    events.splice(i--, 1)\n                }\n                // 删除当前元素并终止循环\n                else if (EventStatus.DELETE_AND_END == status) {\n                    events.splice(i--, 1)\n                    break\n                }\n            }\n        }\n    }\n\n    /**\n     * 绑定事件\n     * @param type 事件类型\n     * @param fn 事件回调\n     */\n    public on(type: string, fn: Function) {\n        this.add(type, { fn, once: false })\n        return this\n    }\n\n    /**\n     * 绑定一次性事件事件\n     * @param type 事件类型\n     * @param fn 事件回调\n     */\n    public once(type: string, fn: Function) {\n        this.add(type, { fn, once: true })\n        return this\n    }\n\n    /**\n     * 发布事件\n     * @param type 事件类型\n     * @param args 参数集合\n     */\n    public emeit(type: string, ...args: any[]) {\n        this.forEach(type, ({ fn, once }) => {\n            fn(...args)\n            if (once) {\n                return EventStatus.DELETE\n            }\n        })\n        return this\n    }\n\n    /**\n     * 事件解绑\n     * @param type 事件类型\n     * @param offFn 解绑的函数\n     */\n    public off(type: string, offFn: Function) {\n        this.forEach(type, ({ fn }) => {\n            if (offFn === fn) {\n                return EventStatus.DELETE_AND_END\n            }\n        })\n        return this\n    }\n\n    /**\n     * 移除某一事件类型的监听\n     * @param type 事件类型\n     */\n    public remove(type: string) {\n        this.data.delete(type)\n        return this\n    }\n\n    /**\n     * 清除所有事件类型的监听\n     */\n    public clear() {\n        this.data.clear()\n        return this\n    }\n}\n"],"sourceRoot":""}